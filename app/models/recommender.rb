class Recommender
  attr_reader :user, :movie_items, :rating, :average_ratings, :similar_users

  def initialize
    @users = Movielen.read_users
    @n_users = @users.count
    @movie_items = Movielen.read_movies
    @n_items = @movie_items.count
    @ratings = Array.new(@n_users){Array.new(@n_items, 0)}
    @ratings_test = Movielen.read_ratings "app/models/import/recommender_system/movie_data/u.test"
    @user_after_ratings = nil
    Movielen.read_ratings.each do |r|
      @ratings[r[0] - 1][r[1] -1] = r[2]
    end
    @similar_users = nil
    @average_ratings = nil
    @labels = ["unknown", "action", "adventure", "animation", "childrens", "comedy",
                        "crime", "documentary", "drama", "fantasy", "film_noir", "horror",
                        "musical", "mystery", "romance", "sci_fi", "thriller", "war", "western"]
  end

  def movie_genres
    mvs = Array.new(@n_items, [])

    for i in (0..@n_items - 1)
      movie_types = Array.new(19, 0)
      (5..23).each do |j|
        movie_types[j-5] = @movie_items[i][j].to_i
      end
      mvs[i] = movie_types
    end
    mvs
  end

  def calculate_avr_g
    avr_rating_clustered = []
    genres = movie_genres
    data_set = Ai4r::Data::DataSet.new(:data_items => genres, :data_labels => @labels)
    clusterers = Ai4r::Clusterers::KMeans.new.build(data_set, 19)
    #debugger
    temp = Array.new(19)
    labels = []
    count = 0;
    genres.each_with_index do |gen, index|
      labels[index] = clusterers.eval(gen)
    end
    #labels = [4, 13, 3, 17, 11, 0, 0, 17, 0, 7, 3, 3, 1, 16, 0, 10, 13, 0, 0, 16, 18, 7, 11, 18, 1, 1, 2, 13, 18, 0, 7, 9, 13, 17, 8, 16, 0, 15, 14, 1, 1, 1, 11, 11, 17, 0, 17, 9, 10, 14, 7, 0, 13, 13, 11, 0, 0, 0, 0, 0, 0, 14, 4, 0, 17, 10, 1, 13, 10, 10, 12, 1, 2, 17, 9, 0, 11, 8, 13, 2, 10, 14, 10, 6, 1, 0, 0, 10, 14, 10, 4, 5, 17, 4, 12, 15, 0, 11, 12, 11, 14, 12, 12, 1, 1, 11, 0, 1, 1, 18, 10, 8, 0, 12, 9, 1, 13, 13, 9, 1, 14, 1, 1, 0, 16, 0, 2, 13, 11, 3, 16, 8, 7, 0, 11, 0, 0, 4, 4, 8, 8, 8, 3, 13, 15, 0, 13, 18, 0, 17, 4, 1, 1, 1, 5, 3, 7, 1, 3, 0, 5, 0, 1, 15, 0, 0, 1, 1, 1, 10, 1, 14, 18, 18, 14, 15, 2, 0, 14, 7, 14, 0, 15, 14, 6, 2, 2, 7, 1, 7, 0, 0, 0, 1, 15, 0, 16, 3, 7, 6, 18, 10, 3, 1, 7, 15, 16, 1, 17, 18, 1, 0, 16, 7, 0, 10, 5, 3, 6, 10, 0, 14, 11, 0, 4, 13, 14, 14, 14, 14, 18, 2, 2, 2, 14, 17, 16, 1, 0, 1, 5, 1, 4, 13, 7, 16, 8, 1, 1, 14, 1, 15, 16, 18, 10, 10, 14, 0, 4, 15, 4, 0, 2, 15, 13, 18, 3, 16, 1, 11, 14, 0, 13, 10, 16, 16, 0, 16, 0, 16, 13, 0, 16, 10, 0, 7, 0, 6, 0, 1, 3, 0, 0, 1, 13, 0, 0, 15, 0, 13, 1, 3, 0, 8, 0, 16, 3, 0, 3, 0, 11, 17, 16, 2, 11, 17, 0, 7, 10, 9, 1, 3, 13, 3, 11, 7, 0, 13, 11, 0, 3, 11, 3, 2, 1, 3, 17, 1, 2, 0, 1, 1, 14, 0, 17, 0, 17, 11, 13, 13, 6, 1, 14, 10, 15, 11, 0, 15, 3, 9, 3, 2, 2, 1, 0, 0, 1, 1, 1, 11, 16, 1, 14, 2, 0, 1, 4, 0, 6, 14, 10, 17, 4, 1, 18, 1, 0, 2, 8, 1, 2, 0, 1, 10, 1, 1, 2, 14, 18, 4, 1, 10, 18, 12, 18, 6, 1, 1, 17, 1, 10, 1, 6, 1, 4, 0, 0, 12, 4, 12, 16, 4, 0, 6, 1, 15, 0, 1, 0, 1, 18, 12, 1, 14, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 14, 10, 2, 2, 0, 2, 2, 8, 0, 0, 0, 0, 16, 8, 0, 8, 3, 0, 0, 0, 3, 7, 18, 12, 14, 0, 1, 4, 10, 3, 1, 17, 1, 7, 3, 5, 10, 10, 3, 5, 10, 18, 0, 3, 1, 1, 0, 1, 18, 0, 8, 12, 1, 0, 0, 3, 0, 0, 0, 0, 2, 8, 10, 3, 10, 7, 1, 10, 0, 8, 8, 7, 17, 17, 1, 3, 18, 0, 7, 0, 8, 16, 5, 3, 0, 10, 0, 0, 12, 4, 2, 18, 12, 0, 16, 10, 13, 3, 8, 7, 13, 6, 14, 16, 18, 0, 3, 0, 11, 0, 8, 0, 18, 6, 1, 6, 13, 6, 13, 0, 3, 1, 13, 15, 3, 1, 18, 1, 14, 1, 10, 11, 16, 3, 0, 1, 2, 0, 12, 3, 14, 11, 3, 7, 16, 3, 12, 13, 17, 2, 8, 8, 5, 3, 1, 3, 0, 5, 3, 1, 3, 3, 0, 1, 0, 3, 6, 0, 0, 11, 0, 3, 8, 4, 12, 12, 0, 0, 0, 1, 1, 7, 0, 0, 9, 6, 15, 1, 0, 0, 0, 7, 0, 16, 9, 9, 3, 7, 10, 11, 0, 7, 17, 3, 3, 17, 3, 3, 0, 3, 0, 3, 16, 1, 0, 15, 6, 6, 2, 6, 15, 6, 6, 3, 6, 6, 0, 9, 11, 18, 18, 6, 6, 1, 13, 13, 2, 1, 1, 13, 7, 15, 10, 0, 5, 17, 11, 0, 0, 0, 1, 9, 10, 0, 16, 5, 6, 0, 0, 10, 1, 0, 17, 0, 16, 17, 16, 11, 1, 1, 18, 1, 1, 17, 16, 1, 0, 16, 1, 0, 16, 10, 10, 16, 1, 0, 16, 17, 10, 10, 16, 11, 11, 13, 7, 1, 1, 10, 13, 10, 0, 13, 13, 0, 3, 14, 1, 9, 15, 2, 14, 13, 0, 1, 10, 10, 9, 6, 8, 14, 3, 15, 0, 3, 6, 10, 0, 6, 10, 2, 1, 10, 0, 10, 0, 10, 10, 17, 6, 17, 1, 8, 1, 1, 16, 4, 10, 14, 2, 0, 6, 1, 18, 7, 1, 1, 2, 0, 2, 2, 2, 9, 8, 9, 9, 16, 6, 0, 1, 1, 4, 10, 0, 3, 1, 15, 8, 13, 8, 18, 13, 15, 0, 2, 6, 10, 10, 0, 2, 6, 2, 13, 17, 4, 3, 1, 16, 0, 3, 5, 9, 0, 11, 1, 1, 13, 17, 9, 6, 1, 6, 6, 4, 0, 1, 0, 10, 0, 0, 10, 5, 1, 5, 10, 0, 16, 2, 5, 4, 13, 0, 2, 0, 0, 9, 6, 5, 0, 0, 5, 18, 7, 4, 1, 4, 6, 0, 14, 0, 0, 0, 1, 3, 16, 17, 16, 16, 1, 1, 0, 0, 0, 13, 1, 11, 0, 15, 13, 5, 14, 0, 16, 3, 0, 0, 15, 1, 0, 0, 4, 13, 15, 4, 0, 0, 7, 10, 0, 10, 11, 1, 17, 0, 3, 7, 10, 12, 5, 10, 16, 0, 8, 1, 17, 9, 16, 0, 1, 0, 1, 0, 0, 0, 11, 17, 1, 5, 0, 3, 12, 1, 1, 0, 9, 11, 3, 15, 2, 3, 11, 0, 0, 13, 3, 3, 0, 3, 3, 10, 12, 16, 3, 1, 12, 0, 1, 4, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 1, 0, 0, 0, 3, 17, 13, 1, 0, 13, 0, 0, 13, 3, 0, 9, 1, 5, 13, 17, 2, 10, 1, 1, 8, 4, 8, 18, 1, 1, 10, 3, 0, 10, 10, 3, 1, 17, 0, 3, 1, 10, 1, 16, 1, 1, 0, 1, 0, 6, 1, 0, 1, 8, 17, 0, 0, 3, 9, 12, 1, 0, 11, 1, 1, 10, 3, 17, 0, 8, 3, 12, 1, 1, 3, 0, 3, 9, 16, 0, 2, 2, 13, 3, 12, 1, 1, 1, 1, 5, 0, 1, 0, 10, 0, 10, 17, 17, 13, 0, 0, 0, 11, 14, 0, 0, 0, 1, 10, 8, 0, 1, 16, 1, 0, 0, 0, 5, 3, 0, 0, 9, 16, 9, 3, 16, 8, 0, 0, 0, 16, 17, 13, 1, 9, 9, 3, 0, 0, 0, 0, 0, 0, 0, 3, 5, 0, 14, 10, 0, 6, 0, 14, 16, 2, 1, 0, 8, 17, 1, 1, 0, 0, 17, 0, 1, 16, 11, 5, 7, 1, 1, 1, 2, 2, 1, 2, 9, 1, 17, 3, 2, 0, 10, 0, 0, 0, 0, 0, 0, 17, 3, 1, 0, 9, 1, 10, 7, 0, 1, 3, 11, 1, 15, 16, 16, 11, 0, 14, 5, 3, 1, 4, 0, 0, 2, 0, 0, 1, 0, 0, 2, 11, 1, 2, 9, 0, 1, 3, 0, 17, 0, 18, 14, 17, 1, 6, 2, 3, 1, 3, 3, 1, 2, 1, 0, 3, 1, 0, 0, 0, 10, 10, 0, 0, 5, 0, 0, 0, 0, 0, 0, 10, 1, 1, 17, 11, 15, 3, 0, 2, 0, 8, 3, 0, 0, 1, 0, 0, 10, 1, 1, 5, 16, 1, 8, 8, 9, 17, 17, 16, 1, 16, 16, 1, 1, 2, 2, 1, 0, 9, 17, 0, 0, 17, 17, 3, 13, 16, 0, 0, 9, 0, 0, 1, 1, 0, 11, 0, 0, 0, 0, 0, 0, 9, 0, 17, 0, 0, 4, 1, 0, 17, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 0, 1, 5, 2, 0, 1, 1, 2, 9, 2, 2, 0, 12, 0, 0, 11, 1, 2, 3, 1, 0, 1, 10, 9, 5, 0, 0, 0, 8, 0, 10, 14, 5, 0, 0, 3, 0, 0, 13, 5, 0, 0, 0, 0, 3, 16, 0, 0, 17, 1, 0, 16, 2, 1, 12, 0, 14, 12, 2, 2, 2, 14, 0, 0, 14, 1, 0, 3, 7, 10, 17, 17, 0, 1, 16, 0, 3, 0, 2, 5, 1, 16, 1, 0, 0, 0, 16, 0, 0, 4, 0, 1, 0, 0, 0, 5, 3, 1, 0, 3, 3, 17, 17, 10, 3, 17, 1, 16, 1, 0, 17, 0, 0, 0, 8, 12, 3, 1, 0, 10, 17, 3, 6, 2, 1, 4, 0, 9, 16, 2, 7, 0, 10, 0, 1, 1, 13, 1, 5, 1, 0, 1, 9, 1, 1, 1, 7, 10, 8, 1, 0, 0, 1, 11, 1, 3, 1, 0, 1, 0, 5, 0, 0, 0, 0, 6, 10, 3, 18, 0, 10, 11, 1, 0, 7, 0, 8, 0, 0, 1, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 16, 0, 9, 13, 3, 1, 0, 2, 3, 0, 8, 13, 17, 0, 13, 3, 0, 9, 5, 0, 0, 0, 1, 10, 17, 1, 0, 0, 6, 7, 0, 3, 0, 0, 3, 5, 3, 3, 0, 0, 9, 2, 3, 17, 1, 0, 0, 0, 1, 9, 13, 15, 2, 3, 0, 1, 3, 0, 0, 3, 1, 3, 0, 8, 1, 5, 1, 5, 2, 17, 8, 0, 5, 2, 0, 1, 3, 1, 0, 3, 6, 17, 17, 0, 9, 0, 17, 7, 17, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 1, 0, 2, 17, 0, 9, 0, 11, 5, 0, 1, 10, 10, 2, 0, 1, 0, 0, 16, 7, 1, 0, 0, 0, 1, 0, 1, 0, 0, 13, 0, 0, 0, 0, 0, 5, 16, 1, 0]
    @users.each_with_index do |user, uindex|
      for i in 0..18 do
        temp[i] = []
      end
      average = Array.new(19, 0)
      @movie_items.each_with_index do |movie, mindex|
        if @ratings[user[0].to_i - 1][movie[0].to_i - 1] != 0
          temp[labels[movie[0].to_i - 1]] << @ratings[user[0].to_i - 1][movie[0].to_i - 1]
        end
      end
      count = count + 1
      (0..18).each do |i|
        if (temp[i].size != 0)
          average[i] = temp[i].reduce(:+).to_f / temp[i].size.to_f
        end
      end
      avr_rating_clustered << average

      x = average
      average_rating_db = x.inject(0){|sum, el| el > 0 ? sum + el : sum}.to_f / x.inject(0){|sum, el| el > 0 ? sum + 1 : sum}.to_f
      User.update(user[0].to_i, average_rating: average_rating_db)
    end
    f = File.open('labels.json', 'w')
    f.write labels.to_json
    f.close
    @average_ratings ||= User.pluck(:average_rating)
    avr_rating_clustered
  end

  def pcs(x, y, avr_rating_clustered)
    userx = avr_rating_clustered[x - 1]
    usery = avr_rating_clustered[y - 1]
    @user_after_ratings ||= User.pluck(:average_rating)
    user_dbx_average_rating = @user_after_ratings[x - 1]
    user_dby_average_rating = @user_after_ratings[y - 1]
    sum_avr = 0.0
    userx.zip(usery).each{|a, b| sum_avr = sum_avr + (a - user_dbx_average_rating)*(b - user_dby_average_rating) if a > 0 && b > 0}
    den1 = userx.inject(0){|sum, el| el > 0 ? sum + (el - user_dbx_average_rating)**2 : sum + 0 }
    den2 = usery.inject(0){|sum, el| el > 0 ? sum + (el - user_dby_average_rating)**2 : sum + 0}
    den = (den1 ** 0.5) * (den2 ** 0.5)
    if den == 0
      return 0
    else
      return sum_avr/den
    end
  end

  def norm avr_rating_clustered
    @average_ratings ||= User.pluck(:average_rating)
    number_users = @users.count
    nomalize = Array.new(number_users) { Array.new(19, 0) }
    (0..@n_users - 1).each do |i|
      (0..18).each do |j|
        if avr_rating_clustered[i][j] != 0
          nomalize[i][j] = avr_rating_clustered[i][j] - @average_ratings[i]
        else
          nomalize[i][j] = Float::INFINITY
        end
      end
    end
    return nomalize
  end

  def delete_row array, index
    array.each do |row|
      p "#{array.size}"
      row.delete_at index
    end
    array
  end

  def guess(user_id, i_id, top_n, pcs_matrix, avr_rating_clustered)
    similarity = []
    for i in (0..@n_users - 1)
      if i + 1 != user_id
        similarity << pcs_matrix[user_id - 1][i]
      end
    end
    @average_ratings ||= User.pluck(:average_rating)
    temp = norm avr_rating_clustered
    p "Size: #{temp[0].size}"
    temp.delete_at(user_id - 1)
    p "Size: #{temp[0].size}"
    top = []
    s = 0
    c = 0
    similarity_sorted, normalize_sorted = similarity.zip(temp).sort_by(&:first).reverse.transpose
    (0..top_n - 1).each do |index|
      if normalize_sorted[index][i_id-1] != Float::INFINITY
        p "size: #{normalize_sorted[index].size} #{index}: #{i_id} #{normalize_sorted[index][i_id-1]}"
        s += normalize_sorted[index][i_id-1]
        c += 1
      end
    end
    if c == 0
      g = @average_ratings[user_id - 1]
    else
      g = s.to_f/c.to_f + @average_ratings[user_id - 1]
    end
    if g < 1.0
      g = 1.0
    elsif g > 5.0
      g = 5.0
    else
      g
    end
  end

  def pcs_generate avr_rating_clustered
    pcs_matrix = Array.new(@n_users) { Array.new(@n_users, 0) }
    for i in (0..@n_users - 1)
        for j in (0..@n_users - 1)
            if i!=j
                pcs_matrix[i][j] = pcs(i + 1, j + 1, avr_rating_clustered)
                p "Generating Similarity Matrix #{i+1}:#{j+1} = #{pcs_matrix[i][j]}"
            end
        end
    end
    pcs_matrix
  end

  def train_recommend
    avr_rating_clustered = calculate_avr_g
    pcs_matrix = pcs_generate avr_rating_clustered

    for i in 0..@n_users -1
      for j in 0..18
        if avr_rating_clustered[i][j] == 0
          avr_rating_clustered[i][j] = guess(i+1, j+1, 150, pcs_matrix, avr_rating_clustered)
        end
      end
    end
    f = File.open('avr_g.json', 'w')
    f.write avr_rating_clustered.to_json
    f.close
    avr_rating_clustered
  end

  def recommend
    f = File.open('labels.json', 'r')
    labels = JSON.parse(f.read)
    f.close
    #labels = [17, 5, 2, 4, 10, 0, 0, 4, 0, 0, 2, 2, 1, 12, 0, 6, 7, 0, 0, 12, 5, 14, 16, 5, 1, 1, 14, 7, 5, 0, 16, 11, 7, 4, 9, 12, 0, 18, 15, 1, 1, 1, 16, 16, 4, 0, 4, 11, 6, 15, 12, 0, 7, 7, 10, 10, 0, 0, 0, 0, 0, 15, 17, 0, 4, 6, 1, 7, 6, 6, 3, 1, 14, 4, 11, 10, 16, 9, 7, 14, 6, 15, 6, 8, 1, 0, 0, 6, 13, 6, 17, 14, 4, 17, 3, 7, 0, 16, 3, 10, 15, 3, 3, 1, 1, 16, 0, 1, 1, 5, 6, 9, 0, 13, 11, 1, 5, 5, 11, 1, 15, 1, 8, 0, 12, 0, 10, 7, 10, 10, 12, 9, 12, 0, 16, 0, 0, 17, 17, 9, 9, 9, 13, 7, 7, 0, 7, 5, 0, 4, 9, 1, 1, 1, 6, 2, 0, 1, 2, 0, 14, 0, 1, 15, 0, 0, 1, 1, 1, 4, 1, 15, 5, 5, 13, 7, 14, 0, 13, 0, 15, 10, 7, 15, 2, 14, 10, 14, 1, 0, 0, 0, 0, 1, 7, 0, 12, 2, 0, 8, 5, 6, 13, 1, 0, 18, 12, 8, 4, 5, 1, 0, 12, 0, 0, 6, 8, 2, 8, 6, 0, 15, 16, 0, 17, 7, 15, 15, 15, 15, 5, 14, 14, 8, 15, 4, 12, 1, 10, 1, 14, 1, 17, 7, 7, 12, 9, 1, 1, 15, 1, 15, 12, 5, 6, 6, 15, 0, 17, 7, 17, 0, 14, 18, 7, 5, 13, 12, 1, 16, 15, 0, 7, 6, 12, 12, 0, 12, 0, 12, 7, 0, 12, 6, 0, 12, 0, 2, 0, 1, 2, 0, 10, 1, 7, 0, 0, 7, 10, 7, 1, 2, 0, 9, 0, 12, 2, 0, 10, 0, 16, 10, 12, 14, 16, 4, 0, 0, 6, 11, 1, 2, 7, 13, 16, 14, 10, 7, 10, 0, 2, 10, 2, 14, 1, 2, 4, 1, 14, 0, 1, 1, 15, 0, 4, 10, 4, 10, 7, 7, 8, 1, 15, 6, 18, 16, 0, 15, 2, 11, 2, 14, 14, 1, 0, 0, 1, 1, 1, 16, 12, 1, 15, 14, 0, 1, 17, 0, 8, 15, 6, 4, 17, 1, 5, 1, 0, 14, 9, 1, 14, 0, 1, 6, 1, 8, 14, 15, 5, 17, 1, 6, 5, 3, 5, 2, 1, 1, 4, 1, 6, 1, 8, 1, 17, 0, 0, 3, 17, 3, 12, 17, 0, 8, 1, 7, 0, 1, 0, 1, 5, 3, 1, 13, 14, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 15, 15, 6, 8, 8, 0, 14, 14, 9, 0, 0, 0, 0, 12, 9, 0, 9, 2, 0, 0, 0, 13, 0, 5, 3, 13, 0, 1, 17, 6, 2, 1, 4, 1, 12, 13, 6, 6, 6, 13, 2, 6, 5, 0, 13, 1, 1, 0, 1, 5, 0, 9, 3, 1, 0, 10, 2, 0, 0, 0, 0, 14, 9, 4, 2, 6, 14, 1, 4, 0, 9, 9, 0, 4, 4, 1, 13, 5, 0, 0, 0, 9, 12, 6, 13, 0, 6, 0, 0, 3, 17, 14, 5, 3, 0, 12, 6, 7, 10, 9, 12, 7, 8, 13, 12, 5, 0, 13, 0, 16, 0, 9, 0, 5, 8, 8, 2, 5, 8, 7, 0, 13, 1, 7, 18, 2, 1, 5, 1, 15, 1, 6, 16, 12, 2, 0, 1, 14, 0, 3, 13, 15, 16, 2, 13, 12, 2, 3, 7, 4, 14, 9, 9, 6, 2, 1, 13, 0, 2, 2, 1, 13, 10, 0, 1, 0, 2, 8, 0, 0, 16, 0, 13, 9, 17, 3, 3, 0, 0, 10, 1, 1, 12, 0, 0, 11, 8, 15, 8, 0, 0, 0, 0, 10, 12, 11, 11, 13, 0, 6, 10, 0, 14, 4, 2, 2, 4, 2, 2, 0, 2, 0, 13, 12, 1, 0, 7, 8, 8, 8, 8, 18, 8, 8, 2, 8, 8, 0, 11, 16, 5, 5, 8, 2, 1, 7, 7, 14, 1, 1, 7, 0, 18, 4, 0, 6, 4, 16, 0, 0, 0, 1, 11, 6, 0, 12, 6, 8, 0, 0, 6, 1, 0, 4, 0, 12, 4, 12, 16, 1, 1, 12, 1, 1, 4, 12, 1, 0, 12, 1, 0, 12, 4, 6, 12, 1, 0, 12, 4, 6, 6, 12, 16, 16, 7, 0, 1, 1, 6, 7, 6, 0, 7, 7, 0, 2, 15, 1, 11, 18, 14, 13, 7, 0, 1, 6, 6, 11, 8, 9, 15, 2, 7, 0, 2, 8, 4, 0, 8, 4, 14, 1, 6, 0, 6, 0, 6, 6, 4, 2, 4, 1, 9, 1, 1, 12, 17, 6, 15, 14, 0, 2, 1, 5, 14, 1, 1, 10, 0, 14, 14, 14, 11, 9, 11, 11, 12, 8, 0, 1, 1, 9, 6, 0, 2, 1, 7, 9, 5, 9, 5, 7, 15, 0, 14, 2, 6, 6, 0, 14, 2, 14, 7, 4, 17, 10, 1, 12, 0, 2, 14, 11, 0, 16, 8, 8, 7, 4, 11, 8, 8, 2, 8, 9, 0, 1, 0, 6, 0, 0, 6, 6, 1, 6, 6, 0, 12, 14, 6, 17, 7, 0, 14, 0, 0, 11, 8, 2, 0, 0, 6, 5, 0, 17, 1, 17, 2, 0, 15, 0, 0, 0, 1, 2, 12, 4, 12, 12, 1, 1, 0, 0, 10, 7, 1, 10, 0, 7, 7, 6, 15, 0, 12, 13, 0, 0, 18, 1, 0, 0, 17, 5, 18, 17, 0, 0, 0, 4, 0, 6, 16, 1, 4, 0, 2, 4, 6, 3, 6, 6, 12, 0, 9, 1, 4, 11, 12, 0, 1, 0, 1, 0, 0, 0, 16, 4, 1, 6, 0, 13, 3, 1, 1, 0, 11, 16, 2, 7, 14, 2, 16, 0, 0, 5, 2, 2, 0, 2, 2, 6, 3, 12, 10, 1, 3, 0, 1, 17, 1, 1, 1, 1, 1, 1, 17, 0, 0, 0, 1, 0, 0, 0, 10, 4, 5, 1, 0, 5, 0, 0, 7, 2, 0, 11, 1, 6, 7, 4, 14, 6, 1, 1, 9, 17, 9, 5, 1, 1, 6, 2, 0, 6, 6, 2, 1, 4, 0, 2, 1, 6, 1, 12, 1, 8, 0, 1, 0, 8, 1, 0, 1, 9, 4, 0, 0, 10, 11, 3, 1, 0, 10, 1, 1, 6, 2, 4, 0, 9, 2, 3, 1, 1, 10, 0, 2, 11, 12, 0, 14, 14, 7, 2, 3, 1, 1, 1, 1, 6, 0, 1, 0, 4, 0, 6, 4, 4, 5, 10, 0, 0, 16, 15, 0, 0, 0, 1, 4, 9, 0, 1, 12, 1, 0, 10, 0, 6, 2, 0, 0, 11, 12, 11, 2, 12, 9, 0, 0, 0, 12, 10, 7, 1, 11, 11, 2, 0, 0, 0, 0, 0, 0, 0, 10, 6, 0, 13, 6, 10, 8, 0, 13, 12, 14, 1, 0, 9, 4, 1, 1, 0, 0, 4, 0, 1, 12, 16, 6, 0, 1, 1, 1, 14, 14, 1, 14, 11, 1, 4, 10, 14, 0, 6, 10, 0, 0, 10, 0, 0, 4, 2, 8, 0, 11, 1, 6, 4, 0, 1, 2, 10, 1, 18, 12, 12, 10, 0, 15, 6, 2, 1, 17, 0, 0, 14, 0, 0, 1, 10, 0, 14, 16, 1, 14, 11, 0, 1, 10, 0, 4, 0, 5, 13, 4, 1, 8, 14, 10, 1, 13, 2, 1, 14, 1, 0, 2, 1, 0, 0, 0, 6, 6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 1, 1, 4, 16, 18, 2, 0, 14, 0, 9, 10, 0, 0, 1, 0, 0, 6, 1, 1, 6, 12, 1, 9, 9, 11, 4, 4, 12, 1, 12, 12, 1, 1, 14, 14, 1, 0, 11, 4, 0, 0, 4, 4, 2, 5, 12, 0, 0, 11, 0, 0, 1, 1, 0, 16, 0, 0, 0, 0, 0, 0, 11, 0, 4, 0, 0, 17, 1, 0, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 6, 0, 0, 1, 6, 14, 0, 1, 1, 14, 11, 14, 14, 0, 13, 0, 0, 16, 8, 14, 13, 1, 0, 1, 6, 11, 6, 0, 0, 0, 9, 0, 6, 13, 6, 0, 0, 10, 0, 0, 7, 6, 0, 0, 0, 0, 2, 12, 0, 0, 4, 1, 0, 12, 14, 1, 3, 0, 15, 3, 14, 14, 14, 15, 0, 0, 15, 1, 0, 2, 0, 4, 4, 4, 0, 1, 12, 0, 2, 0, 14, 6, 1, 12, 1, 0, 10, 0, 12, 0, 0, 17, 0, 1, 0, 0, 0, 6, 2, 1, 10, 13, 13, 4, 4, 6, 13, 4, 1, 12, 1, 0, 4, 0, 0, 0, 9, 3, 2, 1, 0, 6, 4, 13, 2, 10, 1, 9, 0, 11, 12, 14, 12, 0, 6, 0, 1, 1, 7, 1, 6, 1, 0, 1, 11, 1, 1, 1, 13, 6, 9, 1, 10, 0, 1, 16, 1, 10, 1, 0, 1, 0, 6, 0, 0, 0, 10, 8, 6, 2, 5, 0, 6, 16, 1, 0, 13, 0, 9, 0, 0, 1, 0, 0, 1, 0, 0, 9, 0, 0, 0, 1, 12, 0, 11, 7, 2, 1, 0, 14, 2, 0, 9, 7, 4, 0, 7, 10, 0, 11, 6, 0, 0, 0, 1, 6, 4, 1, 0, 0, 8, 13, 0, 13, 0, 0, 2, 6, 13, 13, 0, 0, 11, 10, 13, 4, 1, 0, 0, 0, 1, 11, 7, 7, 14, 2, 0, 1, 2, 0, 0, 2, 1, 10, 0, 9, 1, 14, 1, 6, 14, 4, 9, 0, 6, 14, 0, 1, 2, 1, 0, 2, 2, 4, 4, 0, 11, 0, 4, 13, 4, 0, 0, 0, 0, 10, 0, 0, 11, 0, 0, 1, 0, 14, 4, 0, 11, 0, 16, 6, 0, 1, 6, 6, 14, 0, 1, 0, 0, 12, 0, 1, 0, 0, 0, 1, 10, 1, 0, 0, 7, 0, 0, 0, 0, 0, 2, 12, 1, 0]
    f = File.open('avr_g.json', 'r')
    avr_g_clustered = JSON.parse(f.read)
    f.close
    average_rating_db = []
    avr_g_clustered.each_with_index do |x, index|
      average_rating_db[index] = x.inject(0){|sum, el| el > 0 ? sum + el : sum}.to_f / x.inject(0){|sum, el| el > 0 ? sum + 1 : sum}.to_f
      User.update(index + 1, average_rating: average_rating_db[index])
    end

    ask_movies = movie_items.sample(10)
    new_user_genres = Array.new(19, 0)
    ask_movies.each do |movie|
      p "#{movie[0]}"
      p "#{movie}"
      p "#{movie[1]}: "
      a = gets.chomp.to_f
      if new_user_genres[labels[movie[0].to_i - 1]] != 0
        new_user_genres[labels[movie[0].to_i - 1]] = (new_user_genres[labels[movie[0].to_i - 1]] + a) / 2
      else
        new_user_genres[labels[movie[0].to_i - 1]] = a
      end
    end
    avr_g_clustered << new_user_genres
    db_id = 944

    user_db = User.new(id: db_id, email: "example-944@recommender.org", password: "password", age: 17,
          sex: "M", occupation: "technician", average_rating: 0)
    user_db.save
    @user_after_ratings = User.pluck(:average_rating)
    p "Finding users which have similar preferences:"
    pcs_array = Array.new(@n_users, 0)
    User.all.each_with_index do |user, index|
      if user.id != user_db.id
        pcs_array[index] = pcs(user_db.id, user.id, avr_g_clustered)
      end
    end
    user_index = User.where("id != #{user_db.id}").pluck(:id)
    result, result1 = pcs_array.zip(user_index).sort_by(&:first).reverse.transpose
    top_5 = result1.first(5)
    top_5_genres = []
    top_5.each do |top|
      top_5_genres << avr_g_clustered[top - 1].index(avr_g_clustered[top - 1].max)
    end
    @average_ratings = top_5_genres
  end

  def calculate mean_squared_error
    y_true = []
    y_pred = []
    f = File.open('labels.json', 'r')
    labels = JSON.parse(f.read)
    f.close
    #labels = [17, 5, 2, 4, 10, 0, 0, 4, 0, 0, 2, 2, 1, 12, 0, 6, 7, 0, 0, 12, 5, 14, 16, 5, 1, 1, 14, 7, 5, 0, 16, 11, 7, 4, 9, 12, 0, 18, 15, 1, 1, 1, 16, 16, 4, 0, 4, 11, 6, 15, 12, 0, 7, 7, 10, 10, 0, 0, 0, 0, 0, 15, 17, 0, 4, 6, 1, 7, 6, 6, 3, 1, 14, 4, 11, 10, 16, 9, 7, 14, 6, 15, 6, 8, 1, 0, 0, 6, 13, 6, 17, 14, 4, 17, 3, 7, 0, 16, 3, 10, 15, 3, 3, 1, 1, 16, 0, 1, 1, 5, 6, 9, 0, 13, 11, 1, 5, 5, 11, 1, 15, 1, 8, 0, 12, 0, 10, 7, 10, 10, 12, 9, 12, 0, 16, 0, 0, 17, 17, 9, 9, 9, 13, 7, 7, 0, 7, 5, 0, 4, 9, 1, 1, 1, 6, 2, 0, 1, 2, 0, 14, 0, 1, 15, 0, 0, 1, 1, 1, 4, 1, 15, 5, 5, 13, 7, 14, 0, 13, 0, 15, 10, 7, 15, 2, 14, 10, 14, 1, 0, 0, 0, 0, 1, 7, 0, 12, 2, 0, 8, 5, 6, 13, 1, 0, 18, 12, 8, 4, 5, 1, 0, 12, 0, 0, 6, 8, 2, 8, 6, 0, 15, 16, 0, 17, 7, 15, 15, 15, 15, 5, 14, 14, 8, 15, 4, 12, 1, 10, 1, 14, 1, 17, 7, 7, 12, 9, 1, 1, 15, 1, 15, 12, 5, 6, 6, 15, 0, 17, 7, 17, 0, 14, 18, 7, 5, 13, 12, 1, 16, 15, 0, 7, 6, 12, 12, 0, 12, 0, 12, 7, 0, 12, 6, 0, 12, 0, 2, 0, 1, 2, 0, 10, 1, 7, 0, 0, 7, 10, 7, 1, 2, 0, 9, 0, 12, 2, 0, 10, 0, 16, 10, 12, 14, 16, 4, 0, 0, 6, 11, 1, 2, 7, 13, 16, 14, 10, 7, 10, 0, 2, 10, 2, 14, 1, 2, 4, 1, 14, 0, 1, 1, 15, 0, 4, 10, 4, 10, 7, 7, 8, 1, 15, 6, 18, 16, 0, 15, 2, 11, 2, 14, 14, 1, 0, 0, 1, 1, 1, 16, 12, 1, 15, 14, 0, 1, 17, 0, 8, 15, 6, 4, 17, 1, 5, 1, 0, 14, 9, 1, 14, 0, 1, 6, 1, 8, 14, 15, 5, 17, 1, 6, 5, 3, 5, 2, 1, 1, 4, 1, 6, 1, 8, 1, 17, 0, 0, 3, 17, 3, 12, 17, 0, 8, 1, 7, 0, 1, 0, 1, 5, 3, 1, 13, 14, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 15, 15, 6, 8, 8, 0, 14, 14, 9, 0, 0, 0, 0, 12, 9, 0, 9, 2, 0, 0, 0, 13, 0, 5, 3, 13, 0, 1, 17, 6, 2, 1, 4, 1, 12, 13, 6, 6, 6, 13, 2, 6, 5, 0, 13, 1, 1, 0, 1, 5, 0, 9, 3, 1, 0, 10, 2, 0, 0, 0, 0, 14, 9, 4, 2, 6, 14, 1, 4, 0, 9, 9, 0, 4, 4, 1, 13, 5, 0, 0, 0, 9, 12, 6, 13, 0, 6, 0, 0, 3, 17, 14, 5, 3, 0, 12, 6, 7, 10, 9, 12, 7, 8, 13, 12, 5, 0, 13, 0, 16, 0, 9, 0, 5, 8, 8, 2, 5, 8, 7, 0, 13, 1, 7, 18, 2, 1, 5, 1, 15, 1, 6, 16, 12, 2, 0, 1, 14, 0, 3, 13, 15, 16, 2, 13, 12, 2, 3, 7, 4, 14, 9, 9, 6, 2, 1, 13, 0, 2, 2, 1, 13, 10, 0, 1, 0, 2, 8, 0, 0, 16, 0, 13, 9, 17, 3, 3, 0, 0, 10, 1, 1, 12, 0, 0, 11, 8, 15, 8, 0, 0, 0, 0, 10, 12, 11, 11, 13, 0, 6, 10, 0, 14, 4, 2, 2, 4, 2, 2, 0, 2, 0, 13, 12, 1, 0, 7, 8, 8, 8, 8, 18, 8, 8, 2, 8, 8, 0, 11, 16, 5, 5, 8, 2, 1, 7, 7, 14, 1, 1, 7, 0, 18, 4, 0, 6, 4, 16, 0, 0, 0, 1, 11, 6, 0, 12, 6, 8, 0, 0, 6, 1, 0, 4, 0, 12, 4, 12, 16, 1, 1, 12, 1, 1, 4, 12, 1, 0, 12, 1, 0, 12, 4, 6, 12, 1, 0, 12, 4, 6, 6, 12, 16, 16, 7, 0, 1, 1, 6, 7, 6, 0, 7, 7, 0, 2, 15, 1, 11, 18, 14, 13, 7, 0, 1, 6, 6, 11, 8, 9, 15, 2, 7, 0, 2, 8, 4, 0, 8, 4, 14, 1, 6, 0, 6, 0, 6, 6, 4, 2, 4, 1, 9, 1, 1, 12, 17, 6, 15, 14, 0, 2, 1, 5, 14, 1, 1, 10, 0, 14, 14, 14, 11, 9, 11, 11, 12, 8, 0, 1, 1, 9, 6, 0, 2, 1, 7, 9, 5, 9, 5, 7, 15, 0, 14, 2, 6, 6, 0, 14, 2, 14, 7, 4, 17, 10, 1, 12, 0, 2, 14, 11, 0, 16, 8, 8, 7, 4, 11, 8, 8, 2, 8, 9, 0, 1, 0, 6, 0, 0, 6, 6, 1, 6, 6, 0, 12, 14, 6, 17, 7, 0, 14, 0, 0, 11, 8, 2, 0, 0, 6, 5, 0, 17, 1, 17, 2, 0, 15, 0, 0, 0, 1, 2, 12, 4, 12, 12, 1, 1, 0, 0, 10, 7, 1, 10, 0, 7, 7, 6, 15, 0, 12, 13, 0, 0, 18, 1, 0, 0, 17, 5, 18, 17, 0, 0, 0, 4, 0, 6, 16, 1, 4, 0, 2, 4, 6, 3, 6, 6, 12, 0, 9, 1, 4, 11, 12, 0, 1, 0, 1, 0, 0, 0, 16, 4, 1, 6, 0, 13, 3, 1, 1, 0, 11, 16, 2, 7, 14, 2, 16, 0, 0, 5, 2, 2, 0, 2, 2, 6, 3, 12, 10, 1, 3, 0, 1, 17, 1, 1, 1, 1, 1, 1, 17, 0, 0, 0, 1, 0, 0, 0, 10, 4, 5, 1, 0, 5, 0, 0, 7, 2, 0, 11, 1, 6, 7, 4, 14, 6, 1, 1, 9, 17, 9, 5, 1, 1, 6, 2, 0, 6, 6, 2, 1, 4, 0, 2, 1, 6, 1, 12, 1, 8, 0, 1, 0, 8, 1, 0, 1, 9, 4, 0, 0, 10, 11, 3, 1, 0, 10, 1, 1, 6, 2, 4, 0, 9, 2, 3, 1, 1, 10, 0, 2, 11, 12, 0, 14, 14, 7, 2, 3, 1, 1, 1, 1, 6, 0, 1, 0, 4, 0, 6, 4, 4, 5, 10, 0, 0, 16, 15, 0, 0, 0, 1, 4, 9, 0, 1, 12, 1, 0, 10, 0, 6, 2, 0, 0, 11, 12, 11, 2, 12, 9, 0, 0, 0, 12, 10, 7, 1, 11, 11, 2, 0, 0, 0, 0, 0, 0, 0, 10, 6, 0, 13, 6, 10, 8, 0, 13, 12, 14, 1, 0, 9, 4, 1, 1, 0, 0, 4, 0, 1, 12, 16, 6, 0, 1, 1, 1, 14, 14, 1, 14, 11, 1, 4, 10, 14, 0, 6, 10, 0, 0, 10, 0, 0, 4, 2, 8, 0, 11, 1, 6, 4, 0, 1, 2, 10, 1, 18, 12, 12, 10, 0, 15, 6, 2, 1, 17, 0, 0, 14, 0, 0, 1, 10, 0, 14, 16, 1, 14, 11, 0, 1, 10, 0, 4, 0, 5, 13, 4, 1, 8, 14, 10, 1, 13, 2, 1, 14, 1, 0, 2, 1, 0, 0, 0, 6, 6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 1, 1, 4, 16, 18, 2, 0, 14, 0, 9, 10, 0, 0, 1, 0, 0, 6, 1, 1, 6, 12, 1, 9, 9, 11, 4, 4, 12, 1, 12, 12, 1, 1, 14, 14, 1, 0, 11, 4, 0, 0, 4, 4, 2, 5, 12, 0, 0, 11, 0, 0, 1, 1, 0, 16, 0, 0, 0, 0, 0, 0, 11, 0, 4, 0, 0, 17, 1, 0, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 6, 0, 0, 1, 6, 14, 0, 1, 1, 14, 11, 14, 14, 0, 13, 0, 0, 16, 8, 14, 13, 1, 0, 1, 6, 11, 6, 0, 0, 0, 9, 0, 6, 13, 6, 0, 0, 10, 0, 0, 7, 6, 0, 0, 0, 0, 2, 12, 0, 0, 4, 1, 0, 12, 14, 1, 3, 0, 15, 3, 14, 14, 14, 15, 0, 0, 15, 1, 0, 2, 0, 4, 4, 4, 0, 1, 12, 0, 2, 0, 14, 6, 1, 12, 1, 0, 10, 0, 12, 0, 0, 17, 0, 1, 0, 0, 0, 6, 2, 1, 10, 13, 13, 4, 4, 6, 13, 4, 1, 12, 1, 0, 4, 0, 0, 0, 9, 3, 2, 1, 0, 6, 4, 13, 2, 10, 1, 9, 0, 11, 12, 14, 12, 0, 6, 0, 1, 1, 7, 1, 6, 1, 0, 1, 11, 1, 1, 1, 13, 6, 9, 1, 10, 0, 1, 16, 1, 10, 1, 0, 1, 0, 6, 0, 0, 0, 10, 8, 6, 2, 5, 0, 6, 16, 1, 0, 13, 0, 9, 0, 0, 1, 0, 0, 1, 0, 0, 9, 0, 0, 0, 1, 12, 0, 11, 7, 2, 1, 0, 14, 2, 0, 9, 7, 4, 0, 7, 10, 0, 11, 6, 0, 0, 0, 1, 6, 4, 1, 0, 0, 8, 13, 0, 13, 0, 0, 2, 6, 13, 13, 0, 0, 11, 10, 13, 4, 1, 0, 0, 0, 1, 11, 7, 7, 14, 2, 0, 1, 2, 0, 0, 2, 1, 10, 0, 9, 1, 14, 1, 6, 14, 4, 9, 0, 6, 14, 0, 1, 2, 1, 0, 2, 2, 4, 4, 0, 11, 0, 4, 13, 4, 0, 0, 0, 0, 10, 0, 0, 11, 0, 0, 1, 0, 14, 4, 0, 11, 0, 16, 6, 0, 1, 6, 6, 14, 0, 1, 0, 0, 12, 0, 1, 0, 0, 0, 1, 10, 1, 0, 0, 7, 0, 0, 0, 0, 0, 2, 12, 1, 0]
    f = File.open('avr_g.json', 'r')
    avr_g_clustered = JSON.parse(f.read)
    f.close
    (0..@n_users).each do |uindex|
      (0..@n_items).each do |uitem|
        if @ratings_test[i][j] > 0
          y_true << @ratings_test[i][j]
          y_pred << avr_g_clustered[i][labels[j]]
        end
      end
    end
    puts y_true.zip( y_pred ).inject(0) { |sum, d| sum + ( d[0] -  d[1] )**2.0 } / y_true.size.to_f
  end

  def recommend ratings, user_id
    f = File.open('labels.json', 'r')
    labels = JSON.parse(f.read)
    f.close
    #labels = [17, 5, 2, 4, 10, 0, 0, 4, 0, 0, 2, 2, 1, 12, 0, 6, 7, 0, 0, 12, 5, 14, 16, 5, 1, 1, 14, 7, 5, 0, 16, 11, 7, 4, 9, 12, 0, 18, 15, 1, 1, 1, 16, 16, 4, 0, 4, 11, 6, 15, 12, 0, 7, 7, 10, 10, 0, 0, 0, 0, 0, 15, 17, 0, 4, 6, 1, 7, 6, 6, 3, 1, 14, 4, 11, 10, 16, 9, 7, 14, 6, 15, 6, 8, 1, 0, 0, 6, 13, 6, 17, 14, 4, 17, 3, 7, 0, 16, 3, 10, 15, 3, 3, 1, 1, 16, 0, 1, 1, 5, 6, 9, 0, 13, 11, 1, 5, 5, 11, 1, 15, 1, 8, 0, 12, 0, 10, 7, 10, 10, 12, 9, 12, 0, 16, 0, 0, 17, 17, 9, 9, 9, 13, 7, 7, 0, 7, 5, 0, 4, 9, 1, 1, 1, 6, 2, 0, 1, 2, 0, 14, 0, 1, 15, 0, 0, 1, 1, 1, 4, 1, 15, 5, 5, 13, 7, 14, 0, 13, 0, 15, 10, 7, 15, 2, 14, 10, 14, 1, 0, 0, 0, 0, 1, 7, 0, 12, 2, 0, 8, 5, 6, 13, 1, 0, 18, 12, 8, 4, 5, 1, 0, 12, 0, 0, 6, 8, 2, 8, 6, 0, 15, 16, 0, 17, 7, 15, 15, 15, 15, 5, 14, 14, 8, 15, 4, 12, 1, 10, 1, 14, 1, 17, 7, 7, 12, 9, 1, 1, 15, 1, 15, 12, 5, 6, 6, 15, 0, 17, 7, 17, 0, 14, 18, 7, 5, 13, 12, 1, 16, 15, 0, 7, 6, 12, 12, 0, 12, 0, 12, 7, 0, 12, 6, 0, 12, 0, 2, 0, 1, 2, 0, 10, 1, 7, 0, 0, 7, 10, 7, 1, 2, 0, 9, 0, 12, 2, 0, 10, 0, 16, 10, 12, 14, 16, 4, 0, 0, 6, 11, 1, 2, 7, 13, 16, 14, 10, 7, 10, 0, 2, 10, 2, 14, 1, 2, 4, 1, 14, 0, 1, 1, 15, 0, 4, 10, 4, 10, 7, 7, 8, 1, 15, 6, 18, 16, 0, 15, 2, 11, 2, 14, 14, 1, 0, 0, 1, 1, 1, 16, 12, 1, 15, 14, 0, 1, 17, 0, 8, 15, 6, 4, 17, 1, 5, 1, 0, 14, 9, 1, 14, 0, 1, 6, 1, 8, 14, 15, 5, 17, 1, 6, 5, 3, 5, 2, 1, 1, 4, 1, 6, 1, 8, 1, 17, 0, 0, 3, 17, 3, 12, 17, 0, 8, 1, 7, 0, 1, 0, 1, 5, 3, 1, 13, 14, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 15, 15, 6, 8, 8, 0, 14, 14, 9, 0, 0, 0, 0, 12, 9, 0, 9, 2, 0, 0, 0, 13, 0, 5, 3, 13, 0, 1, 17, 6, 2, 1, 4, 1, 12, 13, 6, 6, 6, 13, 2, 6, 5, 0, 13, 1, 1, 0, 1, 5, 0, 9, 3, 1, 0, 10, 2, 0, 0, 0, 0, 14, 9, 4, 2, 6, 14, 1, 4, 0, 9, 9, 0, 4, 4, 1, 13, 5, 0, 0, 0, 9, 12, 6, 13, 0, 6, 0, 0, 3, 17, 14, 5, 3, 0, 12, 6, 7, 10, 9, 12, 7, 8, 13, 12, 5, 0, 13, 0, 16, 0, 9, 0, 5, 8, 8, 2, 5, 8, 7, 0, 13, 1, 7, 18, 2, 1, 5, 1, 15, 1, 6, 16, 12, 2, 0, 1, 14, 0, 3, 13, 15, 16, 2, 13, 12, 2, 3, 7, 4, 14, 9, 9, 6, 2, 1, 13, 0, 2, 2, 1, 13, 10, 0, 1, 0, 2, 8, 0, 0, 16, 0, 13, 9, 17, 3, 3, 0, 0, 10, 1, 1, 12, 0, 0, 11, 8, 15, 8, 0, 0, 0, 0, 10, 12, 11, 11, 13, 0, 6, 10, 0, 14, 4, 2, 2, 4, 2, 2, 0, 2, 0, 13, 12, 1, 0, 7, 8, 8, 8, 8, 18, 8, 8, 2, 8, 8, 0, 11, 16, 5, 5, 8, 2, 1, 7, 7, 14, 1, 1, 7, 0, 18, 4, 0, 6, 4, 16, 0, 0, 0, 1, 11, 6, 0, 12, 6, 8, 0, 0, 6, 1, 0, 4, 0, 12, 4, 12, 16, 1, 1, 12, 1, 1, 4, 12, 1, 0, 12, 1, 0, 12, 4, 6, 12, 1, 0, 12, 4, 6, 6, 12, 16, 16, 7, 0, 1, 1, 6, 7, 6, 0, 7, 7, 0, 2, 15, 1, 11, 18, 14, 13, 7, 0, 1, 6, 6, 11, 8, 9, 15, 2, 7, 0, 2, 8, 4, 0, 8, 4, 14, 1, 6, 0, 6, 0, 6, 6, 4, 2, 4, 1, 9, 1, 1, 12, 17, 6, 15, 14, 0, 2, 1, 5, 14, 1, 1, 10, 0, 14, 14, 14, 11, 9, 11, 11, 12, 8, 0, 1, 1, 9, 6, 0, 2, 1, 7, 9, 5, 9, 5, 7, 15, 0, 14, 2, 6, 6, 0, 14, 2, 14, 7, 4, 17, 10, 1, 12, 0, 2, 14, 11, 0, 16, 8, 8, 7, 4, 11, 8, 8, 2, 8, 9, 0, 1, 0, 6, 0, 0, 6, 6, 1, 6, 6, 0, 12, 14, 6, 17, 7, 0, 14, 0, 0, 11, 8, 2, 0, 0, 6, 5, 0, 17, 1, 17, 2, 0, 15, 0, 0, 0, 1, 2, 12, 4, 12, 12, 1, 1, 0, 0, 10, 7, 1, 10, 0, 7, 7, 6, 15, 0, 12, 13, 0, 0, 18, 1, 0, 0, 17, 5, 18, 17, 0, 0, 0, 4, 0, 6, 16, 1, 4, 0, 2, 4, 6, 3, 6, 6, 12, 0, 9, 1, 4, 11, 12, 0, 1, 0, 1, 0, 0, 0, 16, 4, 1, 6, 0, 13, 3, 1, 1, 0, 11, 16, 2, 7, 14, 2, 16, 0, 0, 5, 2, 2, 0, 2, 2, 6, 3, 12, 10, 1, 3, 0, 1, 17, 1, 1, 1, 1, 1, 1, 17, 0, 0, 0, 1, 0, 0, 0, 10, 4, 5, 1, 0, 5, 0, 0, 7, 2, 0, 11, 1, 6, 7, 4, 14, 6, 1, 1, 9, 17, 9, 5, 1, 1, 6, 2, 0, 6, 6, 2, 1, 4, 0, 2, 1, 6, 1, 12, 1, 8, 0, 1, 0, 8, 1, 0, 1, 9, 4, 0, 0, 10, 11, 3, 1, 0, 10, 1, 1, 6, 2, 4, 0, 9, 2, 3, 1, 1, 10, 0, 2, 11, 12, 0, 14, 14, 7, 2, 3, 1, 1, 1, 1, 6, 0, 1, 0, 4, 0, 6, 4, 4, 5, 10, 0, 0, 16, 15, 0, 0, 0, 1, 4, 9, 0, 1, 12, 1, 0, 10, 0, 6, 2, 0, 0, 11, 12, 11, 2, 12, 9, 0, 0, 0, 12, 10, 7, 1, 11, 11, 2, 0, 0, 0, 0, 0, 0, 0, 10, 6, 0, 13, 6, 10, 8, 0, 13, 12, 14, 1, 0, 9, 4, 1, 1, 0, 0, 4, 0, 1, 12, 16, 6, 0, 1, 1, 1, 14, 14, 1, 14, 11, 1, 4, 10, 14, 0, 6, 10, 0, 0, 10, 0, 0, 4, 2, 8, 0, 11, 1, 6, 4, 0, 1, 2, 10, 1, 18, 12, 12, 10, 0, 15, 6, 2, 1, 17, 0, 0, 14, 0, 0, 1, 10, 0, 14, 16, 1, 14, 11, 0, 1, 10, 0, 4, 0, 5, 13, 4, 1, 8, 14, 10, 1, 13, 2, 1, 14, 1, 0, 2, 1, 0, 0, 0, 6, 6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 1, 1, 4, 16, 18, 2, 0, 14, 0, 9, 10, 0, 0, 1, 0, 0, 6, 1, 1, 6, 12, 1, 9, 9, 11, 4, 4, 12, 1, 12, 12, 1, 1, 14, 14, 1, 0, 11, 4, 0, 0, 4, 4, 2, 5, 12, 0, 0, 11, 0, 0, 1, 1, 0, 16, 0, 0, 0, 0, 0, 0, 11, 0, 4, 0, 0, 17, 1, 0, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 6, 0, 0, 1, 6, 14, 0, 1, 1, 14, 11, 14, 14, 0, 13, 0, 0, 16, 8, 14, 13, 1, 0, 1, 6, 11, 6, 0, 0, 0, 9, 0, 6, 13, 6, 0, 0, 10, 0, 0, 7, 6, 0, 0, 0, 0, 2, 12, 0, 0, 4, 1, 0, 12, 14, 1, 3, 0, 15, 3, 14, 14, 14, 15, 0, 0, 15, 1, 0, 2, 0, 4, 4, 4, 0, 1, 12, 0, 2, 0, 14, 6, 1, 12, 1, 0, 10, 0, 12, 0, 0, 17, 0, 1, 0, 0, 0, 6, 2, 1, 10, 13, 13, 4, 4, 6, 13, 4, 1, 12, 1, 0, 4, 0, 0, 0, 9, 3, 2, 1, 0, 6, 4, 13, 2, 10, 1, 9, 0, 11, 12, 14, 12, 0, 6, 0, 1, 1, 7, 1, 6, 1, 0, 1, 11, 1, 1, 1, 13, 6, 9, 1, 10, 0, 1, 16, 1, 10, 1, 0, 1, 0, 6, 0, 0, 0, 10, 8, 6, 2, 5, 0, 6, 16, 1, 0, 13, 0, 9, 0, 0, 1, 0, 0, 1, 0, 0, 9, 0, 0, 0, 1, 12, 0, 11, 7, 2, 1, 0, 14, 2, 0, 9, 7, 4, 0, 7, 10, 0, 11, 6, 0, 0, 0, 1, 6, 4, 1, 0, 0, 8, 13, 0, 13, 0, 0, 2, 6, 13, 13, 0, 0, 11, 10, 13, 4, 1, 0, 0, 0, 1, 11, 7, 7, 14, 2, 0, 1, 2, 0, 0, 2, 1, 10, 0, 9, 1, 14, 1, 6, 14, 4, 9, 0, 6, 14, 0, 1, 2, 1, 0, 2, 2, 4, 4, 0, 11, 0, 4, 13, 4, 0, 0, 0, 0, 10, 0, 0, 11, 0, 0, 1, 0, 14, 4, 0, 11, 0, 16, 6, 0, 1, 6, 6, 14, 0, 1, 0, 0, 12, 0, 1, 0, 0, 0, 1, 10, 1, 0, 0, 7, 0, 0, 0, 0, 0, 2, 12, 1, 0]
    f = File.open('avr_g.json', 'r')
    avr_g_clustered = JSON.parse(f.read)
    f.close
    average_rating_db = []
    avr_g_clustered.each_with_index do |x, index|
      average_rating_db[index] = x.inject(0){|sum, el| el > 0 ? sum + el : sum}.to_f / x.inject(0){|sum, el| el > 0 ? sum + 1 : sum}.to_f
      User.update(index + 1, average_rating: average_rating_db[index])
    end

    new_user_genres = Array.new(19, 0)
    ratings.each do |rating|
      p "#{rating}"
      a = ratings[rating].to_f
      if new_user_genres[labels[rating[0].to_i - 1]] != 0
        new_user_genres[labels[rating[0].to_i - 1]] = (new_user_genres[labels[rating[0].to_i - 1]] + a) / 2
      else
        new_user_genres[labels[rating[0].to_i - 1]] = a
      end
    end
    avr_g_clustered << new_user_genres
    User.find(user_id).update(sex: "M", occupation: "technician", average_rating: 0)
    @user_after_ratings = User.pluck(:average_rating)
    p "Finding users which have similar preferences:"
    pcs_array = Array.new(@n_users, 0)
    User.all.each_with_index do |user, index|
      if user.id != user_id
        pcs_array[index] = pcs(avr_g_clustered.length, user.id, avr_g_clustered)
      end
    end
    user_index = User.where("id != #{user_id}").pluck(:id)
    result, result1 = pcs_array.zip(user_index).sort_by(&:first).reverse.transpose
    top_5 = result1.first(5)
    top_5_genres = []
    @similar_users = top_5
    p @similar_users
  end
end
